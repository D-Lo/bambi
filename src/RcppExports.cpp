// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// barcodedReads
void barcodedReads(std::string& bamFile, std::string& indexFile, std::string& barcode);
RcppExport SEXP bxBam_barcodedReads(SEXP bamFileSEXP, SEXP indexFileSEXP, SEXP barcodeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type bamFile(bamFileSEXP);
    Rcpp::traits::input_parameter< std::string& >::type indexFile(indexFileSEXP);
    Rcpp::traits::input_parameter< std::string& >::type barcode(barcodeSEXP);
    barcodedReads(bamFile, indexFile, barcode);
    return R_NilValue;
END_RCPP
}
// generate_bxi
void generate_bxi(const std::string& bamFile);
RcppExport SEXP bxBam_generate_bxi(SEXP bamFileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type bamFile(bamFileSEXP);
    generate_bxi(bamFile);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"bxBam_barcodedReads", (DL_FUNC) &bxBam_barcodedReads, 3},
    {"bxBam_generate_bxi", (DL_FUNC) &bxBam_generate_bxi, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bxBam(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
