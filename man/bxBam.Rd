% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bxBam.R
\name{bxBam}
\alias{bxBam}
\title{bxBam}
\description{
motivation explanation
queries WGS and SS 10x BAMs
}
\section{Arguments}{

\describe{
  \item{p}{A \code{process} object.}
  \item{command}{Character scalar, the command to run. It will be
    escaped via \code{\link[base]{shQuote}}.}
  \item{args}{Character vector, arguments to the command. The will be
    escaped via \code{\link[base]{shQuote}}.}
  \item{commandline}{A character scalar, a full command line.
    No escaping will be performed on it.}
  \item{stdout}{What to do with the standard output. Possible values:
    \code{FALSE}: discard it; a string, redirect it to this file,
    \code{TRUE}: redirect it to a temporary file.}
  \item{stdout}{What to do with the standard error. Possible values:
    \code{FALSE}: discard it; a string, redirect it to this file,
    \code{TRUE}: redirect it to a temporary file.}
  \item{grace}{Grace pediod between the TERM and KILL signals, in
    seconds.}
  \item{...}{Extra arguments are passed to the
    \code{\link[base]{readLines}} function.}
}
}

\section{Details}{

\code{$grab_bx()} starts a new process, it uses \code{\link[base]{pipe}}.
R does \emph{not} wait for the process to finish, but returns
immediately.

\code{$grab_cb()} checks if the process is alive. Returns a logical
scalar.

\code{$grab_ub()} kills the process. It also kills all of its child
processes. First it sends the child processes a \code{TERM} signal, and
then after a grace period a \code{KILL} signal. Then it does the same
for the process itself. A killed process can be restarted using the
\code{restart} method. It returns the process itself.
}

